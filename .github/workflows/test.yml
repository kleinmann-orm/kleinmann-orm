name: test
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
on:
  push:
    paths:
      - 'kleinmann/**'
      - 'tests/**'
      - 'examples/**'
      - 'pyproject.toml'
      - 'poetry.lock'
      - '.github/workflows/test.yml'
jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres
        ports:
          - 5432:5432
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_USER: postgres
        options: --health-cmd=pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    env:
      KLEINMANN_TEST_MODULES: tests.testmodels
    strategy:
      matrix:
        include:
          # NOTE: Each version on Linux; arm64 and macOS only on latest
          - os: ubuntu-latest
            arch: amd64
            python-version: 3.8
          - os: ubuntu-latest
            arch: amd64
            python-version: 3.9
          - os: ubuntu-latest
            arch: amd64
            python-version: 3.10
          - os: ubuntu-latest
            arch: amd64
            python-version: 3.11
          - os: ubuntu-latest
            arch: amd64
            python-version: 3.12
          - os: ubuntu-latest
            arch: arm64
            python-version: 3.12
          - os: macos-latest
            arch: arm64
            python-version: 3.12

    steps:
      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install and configure Poetry
        run: |
          pip install -U pip poetry
          poetry config virtualenvs.create false

      - name: Install project
        run: make install

      - name: Format and lint
        run: make format lint
        if: contains(matrix.os, 'ubuntu') && contains(matrix.arch, 'amd64')

      - name: Run tests
        run: make test_all

      # - name: Upload Coverage
      #   run: |
      #     pip3 install --upgrade coveralls
      #     coveralls --service=github
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     COVERALLS_FLAG_NAME: ${{ matrix.python-version }}
      #     COVERALLS_PARALLEL: true

  # coveralls:
  #   name: Finish Coveralls
  #   needs: test
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Finished
  #       run: |
  #         pip3 install --upgrade coveralls
  #         coveralls --finish
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
